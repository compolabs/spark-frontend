/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.84.0
  Forc version: 0.56.0
  Fuel-Core version: 0.26.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type MethodInput = Enum<{ OpenOrder: OpenOrderInput, MatchOrders: MatchOrdersInput, FulfillOrder: FulfillOrderInput, WithdrawAll: WithdrawAllInput, WithdrawCollateral: WithdrawCollateralInput, Liquidate: LiquidateInput, LiquidateCollateral: LiquidateCollateralInput }>;
export type MethodOutput = Enum<{ OpenOrder: OpenOrderOutput, MatchOrders: MatchOrdersOutput, FulfillOrder: FulfillOrderOutput, WithdrawAll: WithdrawAllOutput, WithdrawCollateral: WithdrawCollateralOutput, Liquidate: LiquidateOutput, LiquidateCollateral: LiquidateCollateralOutput }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { value: string };
export type AssetIdOutput = AssetIdInput;
export type FulfillOrderInput = { clearing_house: AddressInput, base_size: I64Input, order_id: string };
export type FulfillOrderOutput = { clearing_house: AddressOutput, base_size: I64Output, order_id: string };
export type I64Input = { value: BigNumberish, negative: boolean };
export type I64Output = { value: BN, negative: boolean };
export type LiquidateInput = { clearing_house: AddressInput, trader: AddressInput, base_token: AssetIdInput, position_size_to_be_liquidated: I64Input };
export type LiquidateOutput = { clearing_house: AddressOutput, trader: AddressOutput, base_token: AssetIdOutput, position_size_to_be_liquidated: I64Output };
export type LiquidateCollateralInput = { vault: AddressInput, trader: AddressInput, base_token: AssetIdInput, settlement_amount: BigNumberish };
export type LiquidateCollateralOutput = { vault: AddressOutput, trader: AddressOutput, base_token: AssetIdOutput, settlement_amount: BN };
export type MatchOrdersInput = { clearing_house: AddressInput, order_sell_id: string, order_buy_id: string };
export type MatchOrdersOutput = { clearing_house: AddressOutput, order_sell_id: string, order_buy_id: string };
export type OpenOrderInput = { clearing_house: AddressInput, base_token: AssetIdInput, base_size: I64Input, order_price: BigNumberish };
export type OpenOrderOutput = { clearing_house: AddressOutput, base_token: AssetIdOutput, base_size: I64Output, order_price: BN };
export type RawBytesInput = { ptr: BigNumberish, cap: BigNumberish };
export type RawBytesOutput = { ptr: BN, cap: BN };
export type WithdrawAllInput = { vault: AddressInput, collateral: AssetIdInput };
export type WithdrawAllOutput = { vault: AddressOutput, collateral: AssetIdOutput };
export type WithdrawCollateralInput = { vault: AddressInput, amount: BigNumberish, collateral: AssetIdInput };
export type WithdrawCollateralOutput = { vault: AddressOutput, amount: BN, collateral: AssetIdOutput };

interface ScriptProxyAbiInterface extends Interface {
  functions: {
    main: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'main', values: [MethodInput, AddressInput, BigNumberish, Vec<string>, Vec<Bytes>]): Uint8Array;

  decodeFunctionData(functionFragment: 'main', data: BytesLike): DecodedValue;
}

export class ScriptProxyAbi extends Contract {
  interface: ScriptProxyAbiInterface;
  functions: {
    main: InvokeFunction<[method: MethodInput, proxy: AddressInput, fee: BigNumberish, price_feed_ids: Vec<string>, price_update_data: Vec<Bytes>], void>;
  };
}
