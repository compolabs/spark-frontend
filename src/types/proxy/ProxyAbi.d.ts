/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.84.0
  Forc version: 0.56.0
  Fuel-Core version: 0.26.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum ErrorInput { AccessDenied = 'AccessDenied', InvalidPythFeePayment = 'InvalidPythFeePayment', DebugModeRequired = 'DebugModeRequired' };
export enum ErrorOutput { AccessDenied = 'AccessDenied', InvalidPythFeePayment = 'InvalidPythFeePayment', DebugModeRequired = 'DebugModeRequired' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { value: string };
export type AssetIdOutput = AssetIdInput;
export type I64Input = { value: BigNumberish, negative: boolean };
export type I64Output = { value: BN, negative: boolean };
export type RawBytesInput = { ptr: BigNumberish, cap: BigNumberish };
export type RawBytesOutput = { ptr: BN, cap: BN };
export type SparkContractsInput = { version: BigNumberish, account_balance_address: AddressInput, clearing_house_address: AddressInput, insurance_fund_address: AddressInput, treasury_address: AddressInput, perp_market_address: AddressInput, vault_address: AddressInput, pyth_address: AddressInput };
export type SparkContractsOutput = { version: BN, account_balance_address: AddressOutput, clearing_house_address: AddressOutput, insurance_fund_address: AddressOutput, treasury_address: AddressOutput, perp_market_address: AddressOutput, vault_address: AddressOutput, pyth_address: AddressOutput };

export type ProxyAbiConfigurables = {
  OWNER: AddressInput;
  DEBUG_STEP: Option;
  SETTLEMENT_TOKEN_PRICE_FEED: string;
};

interface ProxyAbiInterface extends Interface {
  functions: {
    debug_increment_timestamp: FunctionFragment;
    debug_set_price: FunctionFragment;
    publish_new_version: FunctionFragment;
    update_price: FunctionFragment;
    debug_modify_owed_realized_pnl: FunctionFragment;
    debug_setup_twap: FunctionFragment;
    get_all_spark_contracts_versions: FunctionFragment;
    get_price: FunctionFragment;
    get_spark_contracts: FunctionFragment;
    get_spark_contracts_by_version: FunctionFragment;
    timestamp: FunctionFragment;
    version: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'debug_increment_timestamp', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'debug_set_price', values: [string, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'publish_new_version', values: [AddressInput, AddressInput, AddressInput, AddressInput, AddressInput, AddressInput, AddressInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'update_price', values: [Vec<string>, Vec<Bytes>]): Uint8Array;
  encodeFunctionData(functionFragment: 'debug_modify_owed_realized_pnl', values: [AddressInput, I64Input]): Uint8Array;
  encodeFunctionData(functionFragment: 'debug_setup_twap', values: [AssetIdInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_all_spark_contracts_versions', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_price', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_spark_contracts', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_spark_contracts_by_version', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'timestamp', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'version', values: []): Uint8Array;

  decodeFunctionData(functionFragment: 'debug_increment_timestamp', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'debug_set_price', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'publish_new_version', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'update_price', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'debug_modify_owed_realized_pnl', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'debug_setup_twap', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_all_spark_contracts_versions', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_price', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_spark_contracts', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_spark_contracts_by_version', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'timestamp', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'version', data: BytesLike): DecodedValue;
}

export class ProxyAbi extends Contract {
  interface: ProxyAbiInterface;
  functions: {
    debug_increment_timestamp: InvokeFunction<[], void>;
    debug_set_price: InvokeFunction<[price_feed: string, price: BigNumberish], void>;
    publish_new_version: InvokeFunction<[account_balance_address: AddressInput, clearing_house_address: AddressInput, insurance_fund_address: AddressInput, treasury_address: AddressInput, perp_market_address: AddressInput, vault_address: AddressInput, pyth_address: AddressInput], void>;
    update_price: InvokeFunction<[price_feed_ids: Vec<string>, price_update_data: Vec<Bytes>], void>;
    debug_modify_owed_realized_pnl: InvokeFunction<[trader: AddressInput, amount: I64Input], void>;
    debug_setup_twap: InvokeFunction<[base_token: AssetIdInput, current_twap: BigNumberish], void>;
    get_all_spark_contracts_versions: InvokeFunction<[], Vec<SparkContractsOutput>>;
    get_price: InvokeFunction<[price_feed: string], BN>;
    get_spark_contracts: InvokeFunction<[], SparkContractsOutput>;
    get_spark_contracts_by_version: InvokeFunction<[version: BigNumberish], SparkContractsOutput>;
    timestamp: InvokeFunction<[], BN>;
    version: InvokeFunction<[], BN>;
  };
}
