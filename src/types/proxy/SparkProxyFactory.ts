/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { SparkProxy } from "./SparkProxy";

const bytecode = decompressBytecode("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");

export class SparkProxyFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, SparkProxy.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: SparkProxy.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<SparkProxy>> {
    const factory = new SparkProxyFactory(wallet);
    return factory.deploy(options);
  }
}
