/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { SparkProxy } from "./SparkProxy";

const bytecode = decompressBytecode("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");

export class SparkProxyFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, SparkProxy.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: SparkProxy.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<SparkProxy>> {
    const factory = new SparkProxyFactory(wallet);
    return factory.deploy(options);
  }
}
