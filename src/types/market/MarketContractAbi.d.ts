/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.90.0
  Forc version: 0.60.0
  Fuel-Core version: 0.30.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export type AccountErrorInput = Enum<{ InsufficientBalance: [BigNumberish, BigNumberish] }>;
export type AccountErrorOutput = Enum<{ InsufficientBalance: [BN, BN] }>;
export enum AssetErrorInput { InvalidAsset = 'InvalidAsset' };
export enum AssetErrorOutput { InvalidAsset = 'InvalidAsset' };
export enum AssetTypeInput { Base = 'Base', Quote = 'Quote' };
export enum AssetTypeOutput { Base = 'Base', Quote = 'Quote' };
export enum AuthErrorInput { Unauthorized = 'Unauthorized' };
export enum AuthErrorOutput { Unauthorized = 'Unauthorized' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type MatchErrorInput = Enum<{ CantMatch: [string, string], CantBatchMatch: [] }>;
export type MatchErrorOutput = MatchErrorInput;
export enum OrderChangeTypeInput { OrderOpened = 'OrderOpened', OrderCancelled = 'OrderCancelled', OrderMatched = 'OrderMatched' };
export enum OrderChangeTypeOutput { OrderOpened = 'OrderOpened', OrderCancelled = 'OrderCancelled', OrderMatched = 'OrderMatched' };
export type OrderErrorInput = Enum<{ OrderNotFound: string, PriceCannotBeZero: [], AmountCannotBeZero: [], FailedToRemove: string }>;
export type OrderErrorOutput = OrderErrorInput;
export enum OrderTypeInput { Buy = 'Buy', Sell = 'Sell' };
export enum OrderTypeOutput { Buy = 'Buy', Sell = 'Sell' };
export enum ValueErrorInput { InvalidAmount = 'InvalidAmount', InvalidLength = 'InvalidLength' };
export enum ValueErrorOutput { InvalidAmount = 'InvalidAmount', InvalidLength = 'InvalidLength' };

export type AccountInput = { liquid: BalanceInput, locked: BalanceInput };
export type AccountOutput = { liquid: BalanceOutput, locked: BalanceOutput };
export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type BalanceInput = { base: BigNumberish, quote: BigNumberish };
export type BalanceOutput = { base: BN, quote: BN };
export type CancelOrderEventInput = { order_id: string };
export type CancelOrderEventOutput = CancelOrderEventInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type DepositEventInput = { amount: BigNumberish, asset: AssetIdInput, user: IdentityInput };
export type DepositEventOutput = { amount: BN, asset: AssetIdOutput, user: IdentityOutput };
export type MatchOrderEventInput = { order_id: string, asset: AssetIdInput, order_matcher: IdentityInput, owner: IdentityInput, counterparty: IdentityInput, match_size: BigNumberish, match_price: BigNumberish };
export type MatchOrderEventOutput = { order_id: string, asset: AssetIdOutput, order_matcher: IdentityOutput, owner: IdentityOutput, counterparty: IdentityOutput, match_size: BN, match_price: BN };
export type OpenOrderEventInput = { amount: BigNumberish, asset: AssetIdInput, asset_type: AssetTypeInput, order_type: OrderTypeInput, order_id: string, price: BigNumberish, user: IdentityInput };
export type OpenOrderEventOutput = { amount: BN, asset: AssetIdOutput, asset_type: AssetTypeOutput, order_type: OrderTypeOutput, order_id: string, price: BN, user: IdentityOutput };
export type OrderInput = { amount: BigNumberish, asset_type: AssetTypeInput, order_type: OrderTypeInput, owner: IdentityInput, price: BigNumberish, block_height: BigNumberish };
export type OrderOutput = { amount: BN, asset_type: AssetTypeOutput, order_type: OrderTypeOutput, owner: IdentityOutput, price: BN, block_height: number };
export type OrderChangeInfoInput = { change_type: OrderChangeTypeInput, block_height: BigNumberish, sender: IdentityInput, tx_id: string, amount_before: BigNumberish, amount_after: BigNumberish };
export type OrderChangeInfoOutput = { change_type: OrderChangeTypeOutput, block_height: number, sender: IdentityOutput, tx_id: string, amount_before: BN, amount_after: BN };
export type SetFeeEventInput = { amount: BigNumberish, user: Option<IdentityInput> };
export type SetFeeEventOutput = { amount: BN, user: Option<IdentityOutput> };
export type WithdrawEventInput = { amount: BigNumberish, asset: AssetIdInput, user: IdentityInput };
export type WithdrawEventOutput = { amount: BN, asset: AssetIdOutput, user: IdentityOutput };

export type MarketContractAbiConfigurables = {
  BASE_ASSET: AssetIdInput;
  BASE_ASSET_DECIMALS: BigNumberish;
  OWNER: AddressInput;
  PRICE_DECIMALS: BigNumberish;
  QUOTE_ASSET: AssetIdInput;
  QUOTE_ASSET_DECIMALS: BigNumberish;
};

interface MarketContractAbiInterface extends Interface {
  functions: {
    cancel_order: FunctionFragment;
    deposit: FunctionFragment;
    match_order_pair: FunctionFragment;
    match_orders: FunctionFragment;
    open_order: FunctionFragment;
    set_fee: FunctionFragment;
    withdraw: FunctionFragment;
    account: FunctionFragment;
    config: FunctionFragment;
    fee: FunctionFragment;
    order: FunctionFragment;
    order_change_info: FunctionFragment;
    order_id: FunctionFragment;
    user_orders: FunctionFragment;
  };
}

export class MarketContractAbi extends Contract {
  interface: MarketContractAbiInterface;
  functions: {
    cancel_order: InvokeFunction<[order_id: string], void>;
    deposit: InvokeFunction<[], void>;
    match_order_pair: InvokeFunction<[order0_id: string, order1_id: string], void>;
    match_orders: InvokeFunction<[orders: Vec<string>], void>;
    open_order: InvokeFunction<[amount: BigNumberish, asset_type: AssetTypeInput, order_type: OrderTypeInput, price: BigNumberish], string>;
    set_fee: InvokeFunction<[amount: BigNumberish, user: Option<IdentityInput>], void>;
    withdraw: InvokeFunction<[amount: BigNumberish, asset_type: AssetTypeInput], void>;
    account: InvokeFunction<[user: IdentityInput], Option<AccountOutput>>;
    config: InvokeFunction<[], [AddressOutput, AssetIdOutput, number, AssetIdOutput, number, number]>;
    fee: InvokeFunction<[user: Option<IdentityInput>], BN>;
    order: InvokeFunction<[order: string], Option<OrderOutput>>;
    order_change_info: InvokeFunction<[order_id: string], Vec<OrderChangeInfoOutput>>;
    order_id: InvokeFunction<[asset_type: AssetTypeInput, order_type: OrderTypeInput, owner: IdentityInput, price: BigNumberish, block_height: BigNumberish], string>;
    user_orders: InvokeFunction<[user: IdentityInput], Vec<string>>;
  };
}
